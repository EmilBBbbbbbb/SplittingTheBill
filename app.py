import asyncio

import logging
import os
import re
from findi_total_cost import  final
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

TOKEN = '7797972820:AAGZGsZSXzvJuR-1t0kxjF5BfTlxpkWWTwE'
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot_errors.log"),
        logging.StreamHandler()
    ]
)


class FeedbackState(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_photo = State()


class MemberState(StatesGroup):
    waiting_for_member = State()


# –ö–Ω–æ–ø–∫–∏
upload_button = KeyboardButton(text='üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫')

greet_kb = ReplyKeyboardMarkup(
    keyboard=[
        [upload_button]
    ],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é'
)

members_button = InlineKeyboardButton(text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ—Å—Ç–µ–π", callback_data="members")
keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [members_button]
])


@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—á–µ—Ç.")
    await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —É–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.",
                         reply_markup=greet_kb)


@dp.message(F.text == 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫')
async def request_photo(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.")
    await state.set_state(FeedbackState.waiting_for_photo)


@dp.message(FeedbackState.waiting_for_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = f'images/{file.file_path.split("/")[-1]}'

    await bot.download_file(file.file_path, file_path)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", reply_markup=keyboard)
    await state.clear()


@dp.callback_query(F.data == "members")
async def members(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π')
    await state.set_state(MemberState.waiting_for_member)


@dp.message(MemberState.waiting_for_member)
async def func_member(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        members_count = int(message.text)

        if members_count <= 0:
            await message.answer("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            if not os.path.exists('images'):
                await message.answer("–ü–∞–ø–∫–∞ —Å —á–µ–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ —Å–Ω–∞—á–∞–ª–∞.")
                return

            files = os.listdir('images')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
            if not files:
                await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ —Å–Ω–∞—á–∞–ª–∞.")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            files.sort(key=lambda x: os.path.getmtime(os.path.join('images', x)), reverse=True)
            last_file = files[0]  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            file_path = os.path.join('images', last_file)

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_path}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = float(final(file_path))
            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {total_cost}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

            if total_cost <= 0:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ —á–µ–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ —Å–Ω–æ–≤–∞.")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
            cost_per_person = total_cost / members_count

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_message = (
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.2f}‚ÇΩ\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {members_count}\n\n"
            )

            for i in range(1, members_count + 1):
                result_message += f"–ì–æ—Å—Ç—å {i} ‚Äî {cost_per_person:.2f}‚ÇΩ\n"

            await message.answer(result_message)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞: {str(e)}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2, 3, 4).")
    finally:
        await state.clear()

async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())