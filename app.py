import asyncio
import os
import logging
from pyexpat.errors import messages

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

TOKEN = '7278593611:AAHnok5stRNTA0-7hwrgb2bV9ObZ2ui-sb4'
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot_errors.log"),  # –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class FeedbackState(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_photo = State()

# –ö–Ω–æ–ø–∫–∏
upload_button = KeyboardButton(text='üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫')
feedback_button = KeyboardButton(text='üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
greet_kb = ReplyKeyboardMarkup(
    keyboard=[
        [upload_button],  # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫" –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        [feedback_button]  # –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
    ],
    resize_keyboard=True,# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é'
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç [...]! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—á–µ—Ç.")
    await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ —É–¥–æ–±–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.", reply_markup=greet_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫"
@dp.message(F.text =='üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫')
async def request_photo(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–∞.")
    await state.set_state(FeedbackState.waiting_for_photo)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
members_button = InlineKeyboardButton(text="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="members")
position_button = InlineKeyboardButton(text="—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º", callback_data="position")
w_button = InlineKeyboardButton(text="x1", callback_data="x1")
q_button = InlineKeyboardButton(text="x2", callback_data="x2")
keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [members_button, position_button],
        [w_button, q_button]

    ])
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message(FeedbackState.waiting_for_photo,F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = f'feedbacks/{file.file_path.split("/")[-1]}'
    await bot.download_file(file.file_path, file_path)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(Command('test'))
async def handle_solution(message: types.Message,state: FSMContext):
    await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",reply_markup=keyboard)

@dp.callback_query(F.data == "members")
async def members(callback_query: types.CallbackQuery,state: FSMContext):
    user_id: int = callback_query.from_user.id
    await callback_query.message.answer('–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π')
    await state.set_state()
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ...

# @dp.message(Command('üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'))
# async def handle_feedback(message: types.Message, state: FSMContext):
#     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
#     await state.set_state(FeedbackState.waiting_for_feedback)
#
# @dp.message(FeedbackState.waiting_for_feedback)
# async def save_feedback(message: types.Message, state: FSMContext):
#     feedback_text = message.text
#     user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     try:
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Ñ–∞–π–ª
#         save_feedback_to_file(feedback_text, user_id)
#         await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
#     except Exception as e:
#         await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {str(e)}")
#     finally:
#         await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–∑—ã–≤–∞ –≤ —Ñ–∞–π–ª
# def save_feedback_to_file(feedback_text, user_id):
#     folder = 'feedbacks'  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
#     if not os.path.exists(folder):
#         os.makedirs(folder)  # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
#     file_path = os.path

async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())